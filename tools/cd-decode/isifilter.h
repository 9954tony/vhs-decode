/************************************************************************

    isifilter.h

    cd-decode - Compact Disc RF to EFM converter
    Copyright (C) 2019 Simon Inns

    This file is part of ld-decode-tools.

    cd-decode is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

************************************************************************/

#ifndef ISIFILTER_H
#define ISIFILTER_H

#include <QCoreApplication>
#include <QDebug>

// Note: The ISI filter is a raised cosine filter that acts to pulse-shape
// the EFM sample.  It is aligned based on T1/2 and should therefore
// sharpen the edges of the EFM pulses whilst attenuating interference.

class IsiFilter
{
public:
    IsiFilter();

    void floatIsiProcess(QByteArray &inputSample);

private:
    // Inter-Symbol Interference filter -------------------------------------------------------------------------------

    // Generated by:   http://www-users.cs.york.ac.uk/~fisher/mkfilter
    //    filtertype 	= 	Raised Cosine
    //    samplerate 	= 	40000000
    //    corner 	= 	4321800
    //    beta 	= 	0.90
    //    impulselen 	= 	11
    //    racos 	= 	yes
    //    comp 	= 	no
    //    bits 	= 16
    //    logmin 	=

    /* Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher */

    static const qint32 ceNZeros = 10; // 11 taps
    static constexpr qreal ceGain = 4.771881104e+00;
    qreal ceXv[ceNZeros+1];

    const qreal ceXcoeffs[ceNZeros+1] = { -0.0263671875, +0.0821228027, +0.3143920898, +0.6231689453,
                                          +0.8926391602, +0.9999694824, +0.8926391602, +0.6231689453,
                                          +0.3143920898, +0.0821228027, -0.0263671875,
                                        };

    // Method prototypes ----------------------------------------------------------------------------------------------
    qreal floatIsiFilter(qreal inputSample);
};

#endif // ISIFILTER_H
