/************************************************************************

    filter.h

    ld-efm-sampletodata - EFM sample to data processor for ld-decode
    Copyright (C) 2019 Simon Inns

    This file is part of ld-decode-tools.

    ld-efm-sampletodata is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

************************************************************************/

#ifndef FILTER_H
#define FILTER_H

#include <QCoreApplication>
#include <QDebug>

class Filter
{
public:
    Filter();
        QVector<qint16> lpFilter(QVector<qint16> inputSample);
        qint32 getLpFilterDelay(void);

         QVector<qint16> channelEqualizer(QVector<qint16> inputSample);

    private:
        // Low pass filter ------------------------------------------------------------------------------------------------

        // Channel equalizer filter ---------------------------------------------------------------------------------------

        // M = Amount of over sampling
        // D = Number of symbols to be spanned by the impulse response
        // N = D * M (where both M and D are integers)
        //
        // Oversampling is 40,000,000 / 4,321,800 = 9.255402841
        // Best if D and M are integer multiples
        //
        // N = 11 * 9 = 99 taps

        // Generated by:   http://www-users.cs.york.ac.uk/~fisher/mkfilter
        //        filtertype 	= 	Raised Cosine
        //        samplerate 	= 	40000000
        //        corner        = 	4321800
        //        beta          = 	0.1
        //        impulselen 	= 	99
        //        racos         = 	yes
        //        comp          = 	no
        //        bits          =
        //        logmin        =

        /* Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher
           Command line: /www/usr/fisher/helpers/mkshape -c 1.0804500000e-01 1.0000000000e-01 99 -l */

        static const qint32 ceNZeros = 98;
        static constexpr qreal ceGain = 4.639238712e+00;
        qreal ceXv[ceNZeros+1];

        const qreal ceXcoeffs[ceNZeros+1] = {
            +0.0081551796, +0.0084941671, +0.0047201627, -0.0020273263,
            -0.0089353644, -0.0126406921, -0.0108092836, -0.0034535209,
            +0.0067089680, +0.0151764248, +0.0175976535, +0.0119152930,
            -0.0003030563, -0.0141097476, -0.0230963281, -0.0222835594,
            -0.0107141219, +0.0075428624, +0.0246682403, +0.0323353566,
            +0.0256209927, +0.0058028655, -0.0194319795, -0.0387979226,
            -0.0422934353, -0.0261111459, +0.0047368485, +0.0376057650,
            +0.0571508531, +0.0521848320, +0.0215160178, -0.0240772805,
            -0.0651636854, -0.0814551825, -0.0611290291, -0.0076492073,
            +0.0593434696, +0.1103220331, +0.1176113320, +0.0682647125,
            -0.0272507002, -0.1347740166, -0.2058067234, -0.1939605390,
            -0.0728686725, +0.1511588327, +0.4369811407, +0.7186110914,
            +0.9245368457, +0.9999998717, +0.9245368457, +0.7186110914,
            +0.4369811407, +0.1511588327, -0.0728686725, -0.1939605390,
            -0.2058067234, -0.1347740166, -0.0272507002, +0.0682647125,
            +0.1176113320, +0.1103220331, +0.0593434696, -0.0076492073,
            -0.0611290291, -0.0814551825, -0.0651636854, -0.0240772805,
            +0.0215160178, +0.0521848320, +0.0571508531, +0.0376057650,
            +0.0047368485, -0.0261111459, -0.0422934353, -0.0387979226,
            -0.0194319795, +0.0058028655, +0.0256209927, +0.0323353566,
            +0.0246682403, +0.0075428624, -0.0107141219, -0.0222835594,
            -0.0230963281, -0.0141097476, -0.0003030563, +0.0119152930,
            +0.0175976535, +0.0151764248, +0.0067089680, -0.0034535209,
            -0.0108092836, -0.0126406921, -0.0089353644, -0.0020273263,
            +0.0047201627, +0.0084941671, +0.0081551796
        };

        // Method prototypes ----------------------------------------------------------------------------------------------
        qreal channelEqualizerFir(qreal inputSample);
};

#endif // FILTER_H
