/************************************************************************

    filter.h

    ld-efm-sampletodata - EFM sample to data processor for ld-decode
    Copyright (C) 2019 Simon Inns

    This file is part of ld-decode-tools.

    ld-efm-sampletodata is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

************************************************************************/

#ifndef FILTER_H
#define FILTER_H

#include <QCoreApplication>
#include <QDebug>

class Filter
{
public:
    Filter();

    QVector<qint16> dcBlocking(QVector<qint16> x);
    QVector<qint16> channelEqualizer(QVector<qint16> inputSample);

private:
    // Channel equalizer filter ---------------------------------------------------------------------------------------

    // Generated by:   http://www-users.cs.york.ac.uk/~fisher/mkfilter
    //    filtertype 	= 	Raised Cosine
    //    samplerate 	= 	40000000
    //    corner 	= 	4321800
    //    beta 	= 	0.5
    //    impulselen 	= 	63
    //    racos 	= 	sqrt
    //    comp 	= 	no
    //    bits 	=
    //    logmin 	=

    /* Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher
       Command line: /www/usr/fisher/helpers/mkshape -r 1.0804500000e-01 1.0000000000e-03 63 -l */

    static const qint32 ceNZeros = 62;
    static constexpr qreal ceGain = 4.622936467e+00;

    qreal ceXv[ceNZeros+1];

    const qreal ceXcoeffs[ceNZeros+1] =
    { -0.0032902374, -0.0022644818, +0.0013941907, +0.0042839250,
      +0.0032448957, -0.0014029210, -0.0056251737, -0.0051455903,
      +0.0002610782, +0.0058341888, +0.0057832920, -0.0009530566,
      -0.0086131225, -0.0090458474, +0.0004138136, +0.0128199347,
      +0.0163076146, +0.0050757755, -0.0127648050, -0.0193170959,
      -0.0025605561, +0.0282315558, +0.0425403326, +0.0098059438,
      -0.0697248668, -0.1478728536, -0.1438541934, +0.0099774839,
      +0.3175698068, +0.6981059433, +1.0139440813, +1.1366183578,
      +1.0139440813, +0.6981059433, +0.3175698068, +0.0099774839,
      -0.1438541934, -0.1478728536, -0.0697248668, +0.0098059438,
      +0.0425403326, +0.0282315558, -0.0025605561, -0.0193170959,
      -0.0127648050, +0.0050757755, +0.0163076146, +0.0128199347,
      +0.0004138136, -0.0090458474, -0.0086131225, -0.0009530566,
      +0.0057832920, +0.0058341888, +0.0002610782, -0.0051455903,
      -0.0056251737, -0.0014029210, +0.0032448957, +0.0042839250,
      +0.0013941907, -0.0022644818, -0.0032902374,
    };

    // Method prototypes ----------------------------------------------------------------------------------------------
    qreal channelEqualizerFir(qreal inputSample);
};

#endif // FILTER_H
